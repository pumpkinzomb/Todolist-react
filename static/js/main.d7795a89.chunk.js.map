{"version":3,"sources":["components/TodoListTemplate.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","console","log","nextProps","nextState","_this$props","this","props","form","children","react_default","a","createElement","className","Component","TodoItem","checked","text","id","onToggle","onRemove","color","onClick","e","stopPropagation","concat","TodoItemList","todos","map","todo","src_components_TodoItem","Object","assign","key","Color","_ref","onSelect","selected","Palette","colors","Palette_Color","Form","value","onChange","onCreate","onKeyPress","onColor","src_components_Palette","App","state","input","selectedColor","_onChange","_this","setState","target","_onCreate","_this$state","length","lastId","updateTodo","_setCookie","_onKeyPress","_onToggle","index","findIndex","newTodos","toConsumableArray","objectSpread","_onRemove","filter","_onSelect","name","exp","date","Date","setTime","getTime","transStringValue","JSON","stringify","document","cookie","toUTCString","_getCookie","Promise","resolve","reject","match","_deleteCookie","_this2","then","response","getCookies","parse","_this$state2","src_components_TodoListTemplate","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7795a89.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\r\nimport \"./TodoListTemplate.css\"\r\n\r\nclass TodoListTemplate extends Component{\r\n    componentWillUpdate(){\r\n        console.log(\"updated\");\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log(\"shouldComponentUpdate: \" + JSON.stringify(nextProps) + \" \" + JSON.stringify(nextState));\r\n        console.log(nextProps)\r\n        return true;\r\n    }\r\n    render(){\r\n        const {form,children} = this.props;\r\n        return(\r\n            <main className=\"todo-list-template\">\r\n                <div className=\"title\">\r\n                    오늘 할 일\r\n                </div>\r\n                <section className=\"form-wrapper\">\r\n                    { form }\r\n                </section>\r\n                <section className=\"todos-wrapper\">\r\n                    { children }\r\n                </section>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTemplate;","import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component{\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n    \r\n    render(){\r\n        const { text, checked, id, onToggle, onRemove, color } = this.props;\r\n        return(\r\n            <div className={`todo-item`} onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id);\r\n                }}> &times; </div>\r\n                <div className={`todo-text ${checked ? \"checked\" : \"\"} ${color}`}>\r\n                    <div>{ text }</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">&#x2713;</div>) //checked가 true면 우측 실행, ( 좌측이 true일 경우 )항상 우측이 반환됨\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\"\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render(){\r\n        const { todos, onToggle, onRemove } = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    todos.map(todo => (\r\n                        <TodoItem \r\n                            {...todo}\r\n                            onToggle={onToggle}\r\n                            onRemove={onRemove}\r\n                            key={todo.id}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, {Component} from \"react\";\r\nimport \"./Palette.css\"\r\n\r\nconst Color = ({color, onSelect ,selected}) => {\r\n    return (\r\n        <span className={`palette-${color} color ${selected===color? \"active\" :\"\"}`} onClick={()=>{onSelect(color)}}></span>\r\n    );\r\n}\r\n\r\nclass Palette extends Component{\r\n    \r\n    render(){\r\n        const {colors, onSelect, selected} = this.props;\r\n        \r\n        return(\r\n            <div className=\"palette\">\r\n                {\r\n                colors.map(color=>(\r\n                    <Color \r\n                        color={color}\r\n                        selected={selected} \r\n                        onSelect={onSelect} \r\n                        key={color}\r\n                    />  \r\n                ))\r\n                }\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default Palette;","import React from \"react\";\r\nimport \"./Form.css\"\r\nimport Palette from \"./Palette\"\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, colors, onColor, onSelect}) => {\r\n    return(\r\n        <div>\r\n            <Palette colors={colors} selected={onColor} onSelect={onSelect}  />\r\n            <div className=\"form\">\r\n                <input value={value} onChange={onChange} onKeyPress={onKeyPress} className={onColor} />\r\n                <div className=\"create-button\" onClick={onCreate}>추가</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoListTemplate from \"./components/TodoListTemplate\"\nimport TodoItemList from \"./components/TodoItemList\"\nimport Form from \"./components/Form\"\n\n\nclass App extends Component {\n  \n  state = {\n    input : \"\",\n    todos : [\n      {id:0, text:\"오늘의 할 일1\", checked: false, color:\"\"},\n      {id:1, text:\"클릭하면 체크가 됩니다.\", checked: true, color:\"\"},\n      {id:2, text:\"글씨 색도 바꿔보세요.\", checked: false, color:\"color3\"}\n    ],\n    colors : [\n      \"color1\", //#343a40\n      \"color2\", //#f03e3e\n      \"color3\", //#12b886\n      \"color4\" //#228ae6\n    ],\n    selectedColor:\"\"\n  }\n  \n  componentDidMount(){\n    //this._deleteCookie('todos');\n    this._getCookie(\"todos\").then(\n      response => {\n        let getCookies = JSON.parse(response);\n        response !== null && this.setState({ todos: getCookies});\n      })\n  }\n  shouldComponentUpdate(nextProps, nextState){\n    //console.log(\"shouldComponentUpdate: \" + JSON.stringify(nextProps) + \" \" + JSON.stringify(nextState));\n    return true;\n  }\n\n  _onChange = (e) =>{\n    this.setState(\n      {\n        input:e.target.value\n      }\n    );\n  }\n  \n  _onCreate = () => {\n    const { input,todos,selectedColor } = this.state;\n    if(input.length === 0){\n      return;\n    }\n    let lastId = todos.length === 0 ? -1: todos[todos.length-1].id;\n    const updateTodo  = todos.concat({\n      id: ++lastId,\n      text: input,\n      checked: false,\n      color:selectedColor\n    });\n    this._setCookie(\"todos\",updateTodo,300);\n    this.setState({\n        input:\"\", //input 비움\n        todos: updateTodo,\n        selectedColor:\"\"\n    });\n    \n  }\n\n  _onKeyPress = (e) => {\n    if(e.key === \"Enter\"){\n      this._onCreate();\n    }\n  }\n\n  _onToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const newTodos = [...todos];\n\n    newTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    }\n    const updateTodo  = newTodos;\n    this._setCookie(\"todos\",updateTodo,300);\n    this.setState({\n      todos:updateTodo\n    });\n  }\n\n  _onRemove = (id) => {\n    const { todos } = this.state;\n    const updateTodo  = todos.filter(todo => todo.id !== id);\n    this._setCookie(\"todos\",updateTodo,300);\n    this.setState({\n      todos: updateTodo\n    });\n  }\n\n  _onSelect = (color) =>{\n    this.setState({\n      selectedColor: color\n    });\n  }\n\n  // cookie 메소드 시작\n  //  재미로 만들었지만 cookie를 사용하여 todoList를 저장함\n  _setCookie = (name, value, exp) => {\n    var date = new Date();\n    date.setTime(date.getTime() + exp*24*60*60*1000);\n\n    var transStringValue = JSON.stringify(value);\n    document.cookie = name + '=' + transStringValue + '; expires=' + date.toUTCString() + ';path=/';\n  }\n  _getCookie = (name) => {\n    return new Promise(function (resolve, reject) {\n      var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n      value = value ? value[2] : null;\n      resolve(value);\n    });\n  }\n  _deleteCookie = (name) =>{\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  }\n  // cookie 메소드 끝\n\n  render() {\n    const { input, todos, colors, selectedColor } = this.state;\n    const {\n      _onChange,\n      _onCreate,\n      _onKeyPress,\n      _onToggle,\n      _onRemove,\n      _onSelect\n    } = this;\n    return (\n      <TodoListTemplate form={\n        <Form \n          value={input} //Form\n          onKeyPress={_onKeyPress} //Form\n          onChange={_onChange} //Form\n          onCreate={_onCreate} //Form\n\n          colors={colors} //Palette\n          onColor={selectedColor} //Palette\n          onSelect={_onSelect} //Palette\n        />}>\n          <TodoItemList todos={todos} onToggle={_onToggle} onRemove={_onRemove} />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}