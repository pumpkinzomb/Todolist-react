{"version":3,"sources":["components/TodoListTemplate.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","children","react_default","a","createElement","className","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","color","onClick","e","stopPropagation","concat","Component","TodoItemList","todos","map","todo","src_components_TodoItem","Object","assign","key","Color","onSelect","selected","Palette","colors","Palette_Color","Form","value","onChange","onCreate","onKeyPress","onColor","src_components_Palette","App","state","input","selectedColor","_onChange","_this","setState","target","_onCreate","_this$state","lastId","length","_onKeyPress","_onToggle","index","findIndex","newTodos","toConsumableArray","objectSpread","_onRemove","filter","_onSelect","_this$state2","src_components_TodoListTemplate","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c7c4236.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoListTemplate.css\"\r\n\r\nconst TodoListTemplate = ({form,children}) => {\r\n    return(\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할 일\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                { form }\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                { children }\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;","import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component{\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n    \r\n    render(){\r\n        const { text, checked, id, onToggle, onRemove, color } = this.props;\r\n        return(\r\n            <div className={`todo-item`} onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id);\r\n                }}> &times; </div>\r\n                <div className={`todo-text ${checked ? \"checked\" : \"\"} ${color}`}>\r\n                    <div>{ text }</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">&#x2713;</div>) //checked가 true면 우측 실행, ( 좌측이 true일 경우 )항상 우측이 반환됨\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\"\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render(){\r\n        const { todos, onToggle, onRemove } = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    todos.map(todo => (\r\n                        <TodoItem \r\n                            {...todo}\r\n                            onToggle={onToggle}\r\n                            onRemove={onRemove}\r\n                            key={todo.id}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, {Component} from \"react\";\r\nimport \"./Palette.css\"\r\n\r\nconst Color = ({color, onSelect ,selected}) => {\r\n    return (\r\n        <span className={`palette-${color} color ${selected===color? \"active\" :\"\"}`} onClick={()=>{onSelect(color)}}></span>\r\n    );\r\n}\r\n\r\nclass Palette extends Component{\r\n    \r\n    render(){\r\n        const {colors, onSelect, selected} = this.props;\r\n        \r\n        return(\r\n            <div className=\"palette\">\r\n                {\r\n                colors.map(color=>(\r\n                    <Color \r\n                        color={color}\r\n                        selected={selected} \r\n                        onSelect={onSelect} \r\n                        key={color}\r\n                    />  \r\n                ))\r\n                }\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default Palette;","import React from \"react\";\r\nimport \"./Form.css\"\r\nimport Palette from \"./Palette\"\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, colors, onColor, onSelect}) => {\r\n    \r\n    return(\r\n        <div>\r\n            <Palette colors={colors} selected={onColor} onSelect={onSelect}  />\r\n            <div className=\"form\">\r\n                <input value={value} onChange={onChange} onKeyPress={onKeyPress} className={onColor} />\r\n                <div className=\"create-button\" onClick={onCreate}>추가</div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoListTemplate from \"./components/TodoListTemplate\"\nimport TodoItemList from \"./components/TodoItemList\"\nimport Form from \"./components/Form\"\n\n\nclass App extends Component {\n  \n  state = {\n    input : \"\",\n    todos : [\n      {id:0, text:\"오늘의 할 일1\", checked: false, color:\"\"},\n      {id:1, text:\"클릭하면 체크가 됩니다.\", checked: true, color:\"\"},\n      {id:2, text:\"글씨 색도 바꿔보세요.\", checked: false, color:\"color3\"}\n    ],\n    colors : [\n      \"color1\", //#343a40\n      \"color2\", //#f03e3e\n      \"color3\", //#12b886\n      \"color4\" //#228ae6\n    ],\n    selectedColor:\"\"\n  }\n  \n  _onChange = (e) =>{\n    this.setState(\n      {\n        input:e.target.value\n      }\n    );\n  }\n  \n  _onCreate = () => {\n\n    const { input,todos,selectedColor } = this.state;\n    let lastId = todos[todos.length-1].id;\n\n    this.setState({\n        input:\"\", //input 비움\n        todos: todos.concat({\n          id: ++lastId,\n          text: input,\n          checked: false,\n          color:selectedColor\n        }),\n        selectedColor:\"\"\n      })\n  }\n\n  _onKeyPress = (e) => {\n    if(e.key === \"enter\"){\n      this._onCreate();\n    }\n  }\n\n  _onToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const newTodos = [...todos];\n\n    newTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    }\n    this.setState({\n      todos:newTodos\n    });\n  }\n\n  _onRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  _onSelect = (color) =>{\n    this.setState({\n      selectedColor: color\n    });\n  }\n\n  render() {\n    const { input, todos, colors, selectedColor } = this.state;\n    const {\n      _onChange,\n      _onCreate,\n      _onKeyPress,\n      _onToggle,\n      _onRemove,\n      _onSelect\n    } = this;\n    return (\n      <TodoListTemplate form={\n        <Form \n          value={input} //Form\n          onKeyPress={_onKeyPress} //Form\n          onChange={_onChange} //Form\n          onCreate={_onCreate} //Form\n\n          colors={colors} //Palette\n          onColor={selectedColor} //Palette\n          onSelect={_onSelect} //Palette\n        />}>\n          <TodoItemList todos={todos} onToggle={_onToggle} onRemove={_onRemove} />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}